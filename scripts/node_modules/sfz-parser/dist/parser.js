"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSFZ = exports.transform = void 0;
function transform(sfzText) {
    sfzText = sfzText.replace(/\/\/.*$/gm, "");
    return matchAll(sfzText, /<(.*?)>\s([\s\S]*?)((?=<)|\Z)/gm).map(function (res) {
        var kvs = matchAll(res[2], /(.*?)=(.*?)($|\s(?=.*?=))/gm);
        var prop = {};
        kvs.forEach(function (kv) {
            prop[kv[1].replace(/\s/gm, "")] = /^\d*$/g.test(kv[2])
                ? Number(kv[2])
                : kv[2];
            if (/^[a-gA-G]#?\d$/.test(kv[2]))
                prop[kv[1]] = name2num(kv[2]);
        });
        if (prop.sample)
            prop.sample = prop.sample.replace(/\\/g, "/");
        return {
            type: res[1],
            property: prop,
        };
    });
}
exports.transform = transform;
function applyScopeHeaders(sfz) {
    var global;
    var group;
    return sfz
        .map(function (s) {
        if (s.type === "global")
            global = s;
        else if (s.type === "group")
            group = s;
        else {
            if (global)
                s.property = __assign(__assign({}, s.property), global.property);
            if (group)
                s.property = __assign(__assign({}, s.property), group.property);
            return s.property;
        }
    })
        .filter(function (s) { return typeof s !== "undefined"; });
}
function parseSFZ(sfzText) {
    return applyScopeHeaders(transform(sfzText));
}
exports.parseSFZ = parseSFZ;
function matchAll(str, regexp) {
    var match = null;
    var res = [];
    while ((match = regexp.exec(str)) !== null) {
        res.push(match);
    }
    return res;
}
function name2num(name) {
    var tmp = name.match(/^([a-gA-G])(#?)(\d)$/);
    if (!tmp)
        return -1;
    var d = tmp[1].toLowerCase();
    var s = tmp[2];
    var o = Number(tmp[3]);
    var res = (o + 1) * 12 + (s === "#" ? 1 : 0);
    switch (d) {
        case "c":
            return res;
        case "d":
            return res + 2;
        case "e":
            return res + 4;
        case "f":
            return res + 5;
        case "g":
            return res + 7;
        case "a":
            return res + 9;
        case "b":
            return res + 11;
        default:
            return -1;
    }
}
